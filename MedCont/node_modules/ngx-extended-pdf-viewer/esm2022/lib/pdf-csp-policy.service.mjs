import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class PdfCspPolicyService {
    sanitizer = undefined; // TrustedTypePolicy;
    constructor() {
        const ttWindow = window;
        if (ttWindow.trustedTypes) {
            this.sanitizer = ttWindow.trustedTypes.createPolicy('pdf-viewer', {
                createHTML: (input) => input,
                createScriptURL: (input) => input,
            });
        }
        window.pdfViewerSanitizer = this.sanitizer;
    }
    addTrustedCSS(styles, css) {
        if (typeof window === 'undefined') {
            // server-side rendering
            return;
        }
        if (this.sanitizer) {
            styles.textContent = this.sanitizer.createHTML(css);
        }
        else {
            styles.textContent = css;
        }
    }
    addTrustedJavaScript(scripts, css) {
        if (typeof window === 'undefined') {
            // server-side rendering
            return;
        }
        if (this.sanitizer) {
            scripts.src = this.sanitizer.createScriptURL(css);
        }
        else {
            scripts.src = css;
        }
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: PdfCspPolicyService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
    static ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: PdfCspPolicyService, providedIn: 'root' });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.3.2", ngImport: i0, type: PdfCspPolicyService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: () => [] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGRmLWNzcC1wb2xpY3kuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1leHRlbmRlZC1wZGYtdmlld2VyL3NyYy9saWIvcGRmLWNzcC1wb2xpY3kuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQU0zQyxNQUFNLE9BQU8sbUJBQW1CO0lBQ3RCLFNBQVMsR0FBUSxTQUFTLENBQUMsQ0FBQyxxQkFBcUI7SUFFekQ7UUFDRSxNQUFNLFFBQVEsR0FBRyxNQUF1QyxDQUFDO1FBQ3pELElBQUksUUFBUSxDQUFDLFlBQVksRUFBRTtZQUN6QixJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQyxZQUFZLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRTtnQkFDaEUsVUFBVSxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLO2dCQUM1QixlQUFlLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLEtBQUs7YUFDbEMsQ0FBQyxDQUFDO1NBQ0o7UUFDQSxNQUFjLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUN0RCxDQUFDO0lBRU0sYUFBYSxDQUFDLE1BQW1CLEVBQUUsR0FBVztRQUNuRCxJQUFJLE9BQU8sTUFBTSxLQUFLLFdBQVcsRUFBRTtZQUNqQyx3QkFBd0I7WUFDeEIsT0FBTztTQUNSO1FBQ0QsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2xCLE1BQU0sQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFtQixDQUFDO1NBQ3ZFO2FBQU07WUFDTCxNQUFNLENBQUMsV0FBVyxHQUFHLEdBQUcsQ0FBQztTQUMxQjtJQUNILENBQUM7SUFFTSxvQkFBb0IsQ0FBQyxPQUEwQixFQUFFLEdBQVc7UUFDakUsSUFBSSxPQUFPLE1BQU0sS0FBSyxXQUFXLEVBQUU7WUFDakMsd0JBQXdCO1lBQ3hCLE9BQU87U0FDUjtRQUNELElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNsQixPQUFPLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBbUIsQ0FBQztTQUNyRTthQUFNO1lBQ0wsT0FBTyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7U0FDbkI7SUFDSCxDQUFDO3VHQXBDVSxtQkFBbUI7MkdBQW5CLG1CQUFtQixjQUZsQixNQUFNOzsyRkFFUCxtQkFBbUI7a0JBSC9CLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVHJ1c3RlZFR5cGVzV2luZG93IH0gZnJvbSAndHJ1c3RlZC10eXBlcy9saWInO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgUGRmQ3NwUG9saWN5U2VydmljZSB7XG4gIHByaXZhdGUgc2FuaXRpemVyOiBhbnkgPSB1bmRlZmluZWQ7IC8vIFRydXN0ZWRUeXBlUG9saWN5O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGNvbnN0IHR0V2luZG93ID0gd2luZG93IGFzIHVua25vd24gYXMgVHJ1c3RlZFR5cGVzV2luZG93O1xuICAgIGlmICh0dFdpbmRvdy50cnVzdGVkVHlwZXMpIHtcbiAgICAgIHRoaXMuc2FuaXRpemVyID0gdHRXaW5kb3cudHJ1c3RlZFR5cGVzLmNyZWF0ZVBvbGljeSgncGRmLXZpZXdlcicsIHtcbiAgICAgICAgY3JlYXRlSFRNTDogKGlucHV0KSA9PiBpbnB1dCxcbiAgICAgICAgY3JlYXRlU2NyaXB0VVJMOiAoaW5wdXQpID0+IGlucHV0LFxuICAgICAgfSk7XG4gICAgfVxuICAgICh3aW5kb3cgYXMgYW55KS5wZGZWaWV3ZXJTYW5pdGl6ZXIgPSB0aGlzLnNhbml0aXplcjtcbiAgfVxuXG4gIHB1YmxpYyBhZGRUcnVzdGVkQ1NTKHN0eWxlczogSFRNTEVsZW1lbnQsIGNzczogc3RyaW5nKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBzZXJ2ZXItc2lkZSByZW5kZXJpbmdcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMuc2FuaXRpemVyKSB7XG4gICAgICBzdHlsZXMudGV4dENvbnRlbnQgPSB0aGlzLnNhbml0aXplci5jcmVhdGVIVE1MKGNzcykgYXMgdW5rbm93biBhcyBhbnk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlcy50ZXh0Q29udGVudCA9IGNzcztcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgYWRkVHJ1c3RlZEphdmFTY3JpcHQoc2NyaXB0czogSFRNTFNjcmlwdEVsZW1lbnQsIGNzczogc3RyaW5nKSB7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBzZXJ2ZXItc2lkZSByZW5kZXJpbmdcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHRoaXMuc2FuaXRpemVyKSB7XG4gICAgICBzY3JpcHRzLnNyYyA9IHRoaXMuc2FuaXRpemVyLmNyZWF0ZVNjcmlwdFVSTChjc3MpIGFzIHVua25vd24gYXMgYW55O1xuICAgIH0gZWxzZSB7XG4gICAgICBzY3JpcHRzLnNyYyA9IGNzcztcbiAgICB9XG4gIH1cbn1cbiJdfQ==